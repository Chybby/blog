---
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";

import { getCollection } from "astro:content";

import PageNavigation from "@components/PageNavigation.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import BlogPostPreview from "@components/BlogPostPreview.astro";

export const getStaticPaths = (async ({ paginate }) => {
  const blogPosts = await getCollection("posts");
  blogPosts.sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());
  const uniqueTags: string[] = [
    ...new Set(blogPosts.map((post) => post.data.tags).flat()),
  ];

  return uniqueTags.flatMap((tag) => {
    const filteredPosts = blogPosts.filter((post) =>
      post.data.tags.includes(tag),
    );
    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 5,
    });
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { tag } = Astro.params as Params;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { page } = Astro.props;

const pageTitle = `#${tag}`;
---

<BaseLayout pageTitle={pageTitle}>
  <h1
    class="text-center text-4xl font-bold text-sky-900 transition-colors duration-300 dark:text-violet-300"
  >
    {pageTitle}
  </h1>

  {
    page.data
      .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
      .map((post) => <BlogPostPreview post={post} />)
  }

  {
    page.lastPage != 1 && (
      <div class="flex flex-row justify-center">
        <PageNavigation page={page} />
      </div>
    )
  }
</BaseLayout>
